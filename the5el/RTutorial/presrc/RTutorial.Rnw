\documentclass{beamer}

\mode<presentation>
{
	\usetheme{Copenhagen}
	\usecolortheme{beaver}
	\setbeamercovered{transparent}
	\setbeamertemplate{items}[ball]
	\setbeamertemplate{theorems}[numbered]
	\setbeamertemplate{footline}[frame number]
}

\usepackage{beamerthemesplit}
\usepackage{graphics}
\usepackage{graphicx}
\usepackage{hyperref}
\usepackage{listings}

\title{ Data Analysis and Visualisation using R }
\author{ Vinayak Hegde }
\date{ July 11, 2013 }

\AtBeginSection[]  % "Beamer, do the following at the start of every section"
{
	\begin{frame}<beamer> 
	\frametitle{Outline} % make a \begin{frame}titled "Outline"
	\tableofcontents[currentsection,hideallsubsections]
\end{frame}
}

\begin{document}
<<setup, include=FALSE, prompt=TRUE>>=
# smaller font size for chunks
opts_chunk$set(size = 'footnotesize')
@

\begin{frame}
	\titlepage
\end{frame}

\section*{Outline}
\begin{frame}[allowframebreaks]
	\frametitle{Outline of Topics}
	\tableofcontents
\end{frame}

\section{ Introduction }
\subsection { About R }
\begin{frame}
	\frametitle { What is R ? }
	\begin{block}	{Wikipedia} R is a free software programming language and a software environment for statistical computing and graphics. The R language is widely used among statisticians and data miners for developing statistical software and data analysis.
	\end{block}
\end{frame}

\begin{frame}
	\frametitle { Why use R ? }
	\begin{itemize}
	\item Designed and optimised for data processing
		\item Lots of modules
		\item State of the art graphics
		\item Free as in freedom/beer
		\item Helpful community
		\item Very flexible and good integration
	\end{itemize}
\end{frame}

\begin{frame}
	\frametitle { R Studio Installation }
	\begin{itemize}
		\item Go to \href{http://www.rstudio.com/ide/download/}{{\alert {RStudio website}}}
		\item Download the server/desktop version
		\item For server - Open the browser and go to http://127.0.0.1:8787
		\item For desktop - Click on the shortcut and you are ready to go
	\end{itemize}
\end{frame}

\begin{frame}
  \frametitle { R Studio Basics }
  \begin{itemize}
    \item The Source Editor
    \item The Console / Interpreter
    \item Workspace / History
    \item Plots / Packages / Help
  \end{itemize}
\end{frame}

\subsection { Workspace Basics }
\begin{frame}
	\frametitle { Basics - Starting off and getting help }
	\begin{itemize}
		\item Starting the interpreter
		\item Getting online help  - ? or help()
		\item Searching for help - ?? 
		\item Approximate search - apropos()
	\end{itemize}
\end{frame}

\begin{frame}
	\frametitle { Basics - Objects and Workspaces }
	\begin{itemize}
	\item attach(object) 
		\item detach(object)
		\item rm()
		\item save.image("ExploreData.RData")
		\item load("SavedWorkspace.RData")
		\item save(data1,data2,file="SavedWorkspace.RData")
	\end{itemize}
\end{frame}

\subsection { Basic functions }
\begin{frame}
	\frametitle { Basics - Using inbuilt function }
	\begin{itemize}
		\item str
		\item summary
		\item head
		\item View
		\item Assignment \textless-
		\item source
		\item sink
	\end{itemize}
\end{frame}

\begin{frame}[fragile] 
	\frametitle { Basics - str function }
<<str function>>=
## str function demo
str(mtcars)
@
\end{frame}

\begin{frame}[fragile]
	\frametitle { Basics - summary function }
<<summary function>>=
## summary function demo
summary(mtcars)
@
\end{frame}

\begin{frame}[fragile]
	\frametitle { Basics - head function }
<<head function>>=
## head function demo
head(mtcars)
@
\end{frame}

\subsection { Basic Statistics functions }
\begin{frame}
	\frametitle { Basics - Inbuilt Statistics functions }
	\begin{itemize}
		\item mean
		\item sd
		\item var
		\item median
		\item quantile
		\item hist
		\item plot
	\end{itemize}
\end{frame}

\begin{frame} [fragile]
	\frametitle { Basics - Stats Functions Demo }
<<stats-demo-1>>=
set.seed(1729)
x=rnorm(25)
mean(x);var(x);sd(x)
@
\end{frame}

\begin{frame} [fragile]
	\frametitle { Basics - Stats Functions Demo }
<<stats-demo-2>>=
median(x);quantile(x)
@
\end{frame}

\subsection { Basic Plotting Functions }
\begin{frame} [fragile]
	\frametitle { Basics - Stats Functions Demo }
<<stats-demo-3, fig.width=5, fig.height=5, out.width='.45\\linewidth', fig.show='hold'>>=
hist(x);
plot(x)
@
\end{frame}

\subsection { Basic library functions }
\begin{frame}
	\frametitle { Basics - Library commands }
	\begin{itemize}
		\item install.packages("packagename")
		\item library("package")
		\item update.packages("packages")
		\item search()
		\item detach("package:packagename")
	\end{itemize}	
\end{frame}

\begin{frame}
	\frametitle { Install Views}
	\begin{itemize}
		\item install.views("packageGroupName")
		\item update.views("packageGroupName")
	\end{itemize}
	Package Groups
	\begin{itemize}
		\item Econometrics
		\item Graphics
		\item TimeSeries
		\item HighPerformanceComputing
		\item Optimization
	\end{itemize}
\end{frame}

\subsection { Resources }
\begin{frame}
	\frametitle { Resources }
	\begin{itemize}
		\item \href{http://www.r-project.org}{{\alert {R Project}}}
		\item \href{http://www.rseek.org}{{\alert {R Seek}}}
		\item \href{http://www.rdocumentation.org}{{\alert {R Documentation}}}
		\item \href{http://journal.r-project.org/}{{\alert {R Journal}}}
		\item \href{http://cran.rstudio.com/}{{\alert {CRAN}}}
	\end{itemize}
\end{frame}

\section { Data Structures }
\subsection { Vector }
\begin{frame}
	\frametitle { Vector }
	\begin{block} { Vector Datastructure } 
		Vectors are one-dimensional arrays that can hold numeric data, character data, or logical data. Vectors can be column vectors (created with c()) or row vectors(can be created using the transpose function t()).
	\end{block}
\end{frame}

\begin{frame} [fragile]
	\frametitle { Vector - Demo}
<<vector-demo-1>>=
a <- c(1, 4, 3, -1, 0, 2, 9)
b <- c("Apples", "Oranges", "Banana", "Mango")
c <- c(FALSE, TRUE, TRUE, FALSE )
a[4]
b[c(2,4)]
c[2:4]
@
\end{frame} 

\subsection { Matrix }
\begin{frame}
	\frametitle { Matrix }
	\begin{block} { Matrix Datastructure }
		A matrix is a two-dimensional array where each element has the same mode (numeric,
character, or logical). Matrices are created with the matrix() function.
	\end{block}
\end{frame} 

\begin{frame} [fragile]
	\frametitle { Matrix - Demo 1 }
<<matrix-demo-1>>=
m1 <- matrix(1:20, nrow=5, ncol=4)
m1
@
\end{frame}

\begin{frame} [fragile]
	\frametitle { Matrix - Demo 2 }
<<matrix-demo-2, tidy=FALSE>>=
cells <- c("A","B","C","D","E","F","G","H","I")
rnames <- c("R1", "R2", "R3")
cnames <- c("C1","C2","C3")
m2 <- matrix(cells,nrow=3,ncol=3,byrow=TRUE, 
			dimnames=list(rnames,cnames))
m2
@
\end{frame}

\subsection { Array }  
\begin{frame}
	\frametitle { Array }
	\begin{block} { Array Datastructure }
		Arrays are similar to matrices but can have more than two dimensions. They’re created with an array() function. Like matrices, they can contain only one datatype.
	\end{block}
\end{frame} 

\begin{frame}[fragile]
	\frametitle { Array - Demo 1 }
<<array-demo-1>>=
arows <- c("R1","R2")
acols <- c("C1","C2","C3")
azind <- c("Z1","Z2")
arr <- array(1:12,c(2,3,2),dimnames=list(arows,acols,azind))
@
\end{frame}

\begin{frame}[fragile]
	\frametitle { Array - Demo 2 }
<<array-demo-2>>=
arr
@
\end{frame}

\subsection { Data Frames }
\begin{frame}
	\frametitle { Data Frames }
	\begin{block} { Data Frame Datastructure }
		A Dataframe is like a matrix but each of the columns can be a different datatype. Another way to think about it is as a bunch of different types of columns with similar keys (like a database table). A dataframe is created with the data.frame() function.
	\end{block}
\end{frame} 

\begin{frame}[fragile]
	\frametitle { Dataframe Demo 1 }
<<dataframe-demo-1>>=
batname <- c("Sachin", "Sourav", "Rahul", "Laxman") 
battype <- c("RHB", "LHB", "RHB", "RHB")
matches <- c(198, 113, 164, 134)
batave <- c(53.86, 42.17, 52.31, 45.97)
batinfo <- data.frame(batname, battype, matches, batave)
batinfo
@
\end{frame}

\begin{frame}[fragile]
	\frametitle { Dataframe Demo 2 }
<<dataframe-demo-2>>=
batinfo$batname
batinfo$battype
as.numeric(batinfo$battype)
@
\end{frame}

\begin{frame}[fragile]
	\frametitle { Dataframe Demo 3 }
<<dataframe-demo-3>>=
summary(batinfo)
@
\end{frame}

\subsection { Factors }
\begin{frame}
	\frametitle { Factors }
	\begin{itemize}
		\item Factors are made of categorical data
		\item Factors can be ordered or unordered
		\item Factors are represented internally as numbers
		\item Assignment is by alphabetical order
	\end{itemize}
\end{frame} 

\begin{frame}[fragile]
	\frametitle { Factor - Demo 1 }
<<factor-demo-1>>=
grades1 <- factor(c("Bad", "Poor", "Average", "Good", "Excellent"))
grades1
as.numeric(grades1)
@
\end{frame}

\begin{frame}[fragile]
	\frametitle { Factor - Demo 2 }
<<factor-demo-2>>=
grades2 <- factor(grades1, order=TRUE, levels=grades1)
grades2
as.numeric(grades2)
@
\end{frame}

\subsection { List } 
\begin{frame}
	\frametitle { List }
	\begin{block} { List Datastructure }
		List is a bit of a mixed bag. A list is an ordered collection of objects. A list allows you to gather a variety of (possibly unrelated) objects under one name. A list may contain an arbitrary combination of vectors, matrices, data frames, and even other lists. You create a list using the list() function.
	\end{block}
\end{frame} 

\begin{frame}[fragile]
	\frametitle { List Demo 1 }
<<list-demo-1>>=
a <- "Hello world"
b <- c(17,19,23,29)
c <- matrix(1:12,nrow=3)
l <- list(header=a, primes=b, c)
l[[2]]
l[["primes"]]
@
\end{frame}

\begin{frame}[fragile]
	\frametitle { List Demo 2 }
<<list-demo-2>>=
l 
@
\end{frame}

\subsection { Basic datastucture functions }
\begin{frame}
	\frametitle { Working with Data Structures }
	\begin{itemize}
		\item concatenate c()
		\item cbind()
		\item rbind()
		\item data.frame()
		\item mode()
		\item class()
	\end{itemize}
\end{frame}

\begin{frame}
	\frametitle { Working with Data Structures }
	\begin{itemize}
		\item with()
		\item sort()
		\item subset()
		\item select()
		\item transform()
	\end{itemize}
\end{frame}

\begin{frame}
	\frametitle { Working with Data Structures }
	\begin{itemize}
		\item names()
		\item row.names()
		\item attributes()
	\end{itemize}
\end{frame}

\section { Working with Data }
\subsection { Reading Data }
\begin{frame}
	\frametitle { Reading data from multiple Sources }
	\begin{itemize}
		\item Excel files
		\item web pages
		\item csv
		\item databases
	\end{itemize}
\end{frame}

\begin{frame}[fragile]
	\frametitle { Reading data in Excel files }
<<excel-example, eval=FALSE>>=
library(gdata)
read.xls("~/hacknight/All_India_Index_April3.xls", sheet=1)	
@
\end{frame}

\begin{frame}[fragile]
	\frametitle { Reading data from HTML tables on the web }
<<html-table-example, eval=FALSE>>=
library(XML)
url<-"http://en.wikipedia.org/wiki/2011_Cricket_World_Cup_statistics"
tbls <- readHTMLTable(url)
specifictbl <- readHTMLTable(url, which=3)
@
\end{frame}

\begin{frame}[fragile]
	\frametitle { Reading from csv files }
<<csv-example, eval=FALSE>>=
	stk <- read.csv("~/stackoverflow.csv")
@
Alternatives are read.table(), read.csv2()

\end{frame}

\subsection { Transforming Data }
\begin{frame}[fragile]
	\frametitle { Get a subset of data }
Using Subset function
<<subset-example-1, tidy=FALSE, eval=FALSE>>=
stkjs <- subset (stk,Tag=="javascript")
stkweb <- subset (stk, Tag=="javascript" | Tag=="html" 
| Tag =="css" | Tag=="ajax")
@
An alternative method by column number and names
<<subset-example-2, eval=FALSE>>=
carsmall <- mtcars[1:10,c('mpg','cyl','disp','hp','drat')]
carsmall <- mtcars[1:10,1:5]
carstrans <- t(carsmall)
@
\end{frame}

\begin{frame} [fragile]
	\frametitle { Filtering a set of data }
<<filter-example-1>>=
car400plus <- mtcars[mtcars$displ > 400,]
carcyl6 <- mtcars[mtcars$cyl == 6,]
powcars <- mtcars[mtcars$cyl == 8 & mtcars$disp > 400,]
@
\end{frame}

\begin{frame} [fragile]
	\frametitle { Merging Dataframes }
Merging by rows
<<merge-example-1, eval=FALSE>>=
car400 <- mtcars[mtcars$cyl == 8 & mtcars$disp == 400,]
car400plus <- mtcars[mtcars$cyl == 8 & mtcars$disp > 400,]
car400all <- merge(car400,car400plus,all=TRUE)
@

Alternative Method using rbind
<<merge-example-2,eval=FALSE>>=
car400all <-rbind(car400,car400plus)
@
\end{frame}

\begin{frame} [fragile]
  \frametitle { Merging Dataframes }
Merging by columns
<<merge-example-3, eval=FALSE>>=
carset1 <- mtcars[1:5,c('mpg','disp')]
carset2 <- mtcars[1:5,c('cyl','drat')]
merge(carset1,carset2,all=TRUE) # Does this work ? why ? 
merge(carset1,carset2,by="row.names",all=TRUE)
@
Alternative Method using cbind()
<<merge-example-4,eval=FALSE>>=
carall <- cbind(carset1,carset2)
@
\end{frame}

\begin{frame}[fragile]
	\frametitle { reshape library - melt function }
<<melt-function,eval=FALSE,tidy=FALSE>>=
stk <- read.csv("~/stackoverflow.txt")
head(stk)
nrow(stk)
stkm <- melt(stk)
head(stkm)
@
\end{frame}

\begin{frame}[fragile]
	\frametitle { reshape library - cast function }
<<cast-function,eval=FALSE,tidy=FALSE>>=
head(stkm)
stkm$variable <- as.numeric(sub("X","",stkm$variable))
head(stkm)
names(stkm)[2] <- "YearMonth"
head(stkm)
stkc <- cast(stkm, Tag ~ YearMonth)
head(stkc)
@
\end{frame}

\subsection { Live example } 
\begin{frame}
	\frametitle { Making sense of data - A live example }
	\begin{block} { Lets answer these questions } 
		Given the Cars dataset, what is the median/mean mpg of the datapoints by number of cylinders. also what is the number of datapoints we have in each set
	\end{block}
\end{frame}

\begin{frame}[fragile]
	\frametitle { Approach 1 - Manual approach - Subset and functions }
<<analysis-1,eval=FALSE>>=
unique(mtcars$cyl)
cyl4 <- subset(mtcars,cyl==4)
cyl6 <- subset(mtcars,cyl==6)
cyl8 <- subset(mtcars,cyl==8)
nrow(cyl4)
nrow(cyl6)
nrow(cyl8)
mean(cyl6$mpg)
mean(cyl4$mpg)
mean(cyl8$mpg)
median(cyl4$mpg)
median(cyl6$mpg)
median(cyl8$mpg)
@
\end{frame}

\begin{frame}[fragile]
  \frametitle { Approach 2 - Get smarter - Use loops }
<<analysis-2,eval=FALSE>>=
ans = data.frame()
for ( cylnum in unique(mtcars$cyl) )
{
tmp = subset(mtcars, mtcars$cyl==cylnum)
count = nrow(tmp)
mean = mean(tmp$mpg)
median = median(tmp$mpg)
ans = rbind(ans, data.frame(cylnum, count, mean, median) )
}
@
\end{frame}

\begin{frame}[fragile]
  \frametitle { Approach 3 - Base R - Use *apply functions }
<<analysis-3,eval=FALSE>>=
tapply(mtcars$mpg,mtcars$cyl,FUN=length)
tapply(mtcars$mpg,mtcars$cyl,FUN=mean)
tapply(mtcars$mpg,mtcars$cyl,FUN=median)
@
\end{frame}

\begin{frame}[fragile]
  \frametitle { Approach 4 - Base R - use aggregate function }
<<analysis-4,eval=FALSE>>=
aggregate(mpg~cyl, data=mtcars, FUN="length")
aggregate(mpg~cyl, data=mtcars, FUN="mean")
aggregate(mpg~cyl, data=mtcars, FUN="median")
@
\end{frame}

\begin{frame}[fragile]
  \frametitle {Approach 5 - doBy Package - use summaryBy function }
<<analysis-5,eval=FALSE,tidy=FALSE>>=
summaryBy(mpg~cyl,data=mtcars,FUN=function(x) 
  c(count=length(x), mean=mean(x), median=median(x)))
@
\end{frame}

\begin{frame}[fragile]
	\frametitle { Approach - plyr library - use **ply functions }
<<analysis-6,eval=FALSE,tidy=FALSE>>=
ddply(mtcars,'cyl',function(x) 
  c(count=nrow(x), mean=mean(x$mpg), median=median(x$mpg)),
	.progress='text')
@
\end{frame}

\begin{frame}
	\frametitle { More about the plyr module }
plyr is a very useful module for applying functions to different datastructures. The functions in plyr are of the form XYply where 'X' is the Input datatype and 'Y' is the Output datatype
So as in the above example, the input datatype was a dataframe and the output datatype is a dataframe. The type and their letter designations are
	\begin{itemize}
		\item “a” - array
		\item “d” - data.frame
		\item “l” - list
		\item “m” - matrix
		\item “\textunderscore” - no output returned 
	\end{itemize}
\end{frame}

\section { Visualisation }
\subsection { Introduction }
\begin{frame}
	\frametitle { Why Visualisation ? }
		\begin{itemize}
			\item Easier to percieve differences easily (Magnitude, Range, Difference)
			\item Easier to see outliers, anomalier and grouping
			\item Easy to do exploratory analysis in R
			\item Easier to build narratives (Picture worth a million numbers)
			\item Bling !!! 
		\end{itemize}
\end{frame}

\begin{frame}
	\frametitle { Visualisation Packages }
	\begin{itemize}
		\item boxplot, pie, hist from base graphics
		\item specialized packages like vioplot
		\item Grammar of Graphics - ggplot2
		\item lattice
	\end{itemize}
\end{frame}

\subsection { Basic plots }
\begin{frame}
	\frametitle { Boxplots }
	\begin{itemize}
		\item Good for individual variable or groups of variables
		\item Good for showing outliers and quartiles ("shape")
		\item take up less space than a histogram 
	\end{itemize}
\end{frame}

\begin{frame}[fragile,allowframebreaks]
	\frametitle { Boxplot example }
<<boxplot-demo-1, fig.width=8, fig.height=5, fig.show='hold',tidy=FALSE>>=
boxplot(mpg ~ cyl, data=mtcars, main="Car Mileage Data", 
        xlab="No. of Cylinders", ylab="Miles Per Gallon", 
        Notch=TRUE, col=rainbow(3))
@
\end{frame}

\begin{frame}
	\frametitle { Violin plots }
	\begin{itemize}
		\item Similar to boxplots but show probablity density
		\item Good for showing distribution
		\item Look like violins hence the name
	\end{itemize}
\end{frame}

\begin{frame}[allowframebreaks,fragile]
	\frametitle { Violin Plot Example } 
<<vioplot-demo-1, fig.width=8, fig.height=5, fig.show='hold',tidy=FALSE>>=
library(vioplot)
library(sm)
cyl4 <- subset(mtcars,cyl==4)
cyl6 <- subset(mtcars,cyl==6)
cyl8 <- subset(mtcars,cyl==8)
vioplot::vioplot(cyl4$mpg,cyl6$mpg,cyl8$mpg, 
	names=c("cyl4","cyl6", "cyl8"), col="yellow")
@
\end{frame}

\begin{frame}
	\frametitle { Barplot }
	\begin{itemize}
		\item Good to compare relative magnitudes
		\item Good to compare time series data
		\item Easier on the eyes
	\end{itemize}
\end{frame}

\begin{frame}[allowframebreaks,fragile]
	\frametitle { Barplot Example }
<<barplot-demo-1, fig.width=8, fig.height=5, fig.show='hold',tidy=FALSE>>=
barplot(table(mtcars$cyl),main="Car distribution", 
        ylab="number of cylinders",xlab="Number of cars", 
        horiz=TRUE,col=topo.colors(3))
@
\end{frame}

\begin{frame}[allowframebreaks,fragile]
  \frametitle { Stacked Barplot Example }
<<stackedbarplot-demo-1,fig.width=8, fig.height=5, fig.show='hold',tidy=FALSE>>=
counts <- table(mtcars$cyl, mtcars$gear)
barplot(counts, main="Car Distribution by Gears and CYL",
         xlab="Number of Gears", col=rainbow(3),
         legend = rownames(counts))
@
\end{frame}

\subsection { Advanced Plots }
\begin{frame}[fragile]
  \frametitle { Heatmap Example 1 }
<<heatmap-demo-1,fig.width=3, fig.height=3, fig.show='hold',eval=FALSE>>=
# scale data to mean=0, sd=1 and convert to matrix
mtscaled <- as.matrix(scale(mtcars))

# create heatmap and don't reorder columns
heatmap(mtscaled, Colv=F, scale='none')
@
\end{frame}

\begin{frame}[fragile]
  \frametitle { Heatmap Example 2 }
<<heatmap-demo-2,fig.width=3, fig.height=3, fig.show='hold',eval=FALSE,tidy=FALSE>>=
# cluster rows
hc.rows <- hclust(dist(mtscaled))
plot(hc.rows)

# transpose the matrix and cluster columns
hc.cols <- hclust(dist(t(mtscaled)))

# draw heatmap for first cluster
heatmap(mtscaled[cutree(hc.rows,k=2)==1,], 
        Colv=as.dendrogram(hc.cols), scale='none')

# draw heatmap for second cluster
heatmap(mtscaled[cutree(hc.rows,k=2)==2,], 
        Colv=as.dendrogram(hc.cols), scale='none')
@
\end{frame}

\subsection { Grammar of Graphics }
\begin{frame}
	\frametitle { Introduction to ggplot2 }
	\begin{itemize}
		\item Thinking about dataviz moves away from mechanics to representation
		\item Allows you to layer graphics and added remove components 
		\item Based on Leland Wilkinson's "The Grammar of Graphics" book
		\item Allows to compose graphs based on components
		\item Allows to build beautiful graphs quickly
	\end{itemize}
\end{frame}

\begin{frame}
	\frametitle { Components of Graphics - 1 }
	\begin{itemize}
		\item \textbf { Data } - The cleaned up data with all the different variables, factors. This includes the \textbf { mappings } to the aesthetic attributes of a plot.
		\item \textbf { Geom } - Geometric objects or geoms represent what you actually see on the screen. This includes lines, splines, points, polygons etc.
		\item \textbf { Stat } - Statistical transformations. These are optional. Examples include binning in a histogram or summarising a 2D relationship with a linear model.
	\end{itemize}  
\end{frame}

\begin{frame}
	\frametitle { Components of Graphics - 2 }
	\begin{itemize}
		\item \textbf { Scale } - Scales map values in the data into the aesthetic space such as color, size or shape. Scales draw axes and legends to represent what is seen on the screen to the actual underlying data.
		\item \textbf { Coord } - A coordinate sytems that provides a mapping from the data onto the screen. Examples include Cartesian coordinates, map coordinates and polar coordinates.
		\item \textbf { Facet } - A facet gives us a method to break un the data into subsets as well as display these on the screen. Great for increasing infomation density while graphing multidimensional data.
	\end{itemize}
\end{frame}

\begin{frame}[fragile,allowframebreaks]
	\frametitle { Scatterplot }
<<scatter-demo-1,fig.width=8, fig.height=4, fig.show='hold',warnings=FALSE,message=FALSE>>=
library(ggplot2)
qplot(displ,hwy,data=mpg)
@
\end{frame}

\begin{frame}[fragile,allowframebreaks]
  \frametitle { Scatterplot }
<<scatter-demo-2,fig.width=8, fig.height=4, fig.show='hold',warnings=FALSE,message=FALSE>>=
qplot(displ,hwy,data=mpg,geom="jitter")
@
\end{frame}

\begin{frame}[fragile,allowframebreaks]
  \frametitle { Scatterplot }
<<scatter-demo-3,fig.width=8, fig.height=4, fig.show='hold',warnings=FALSE,message=FALSE>>=
qplot(displ,hwy,data=mpg,color=class)
@
\end{frame}

\begin{frame}[fragile,allowframebreaks]
  \frametitle { Scatterplot }
<<scatter-demo-4,fig.width=8, fig.height=4, fig.show='hold',warnings=FALSE,message=FALSE>>=
qplot(displ,hwy,data=mpg,color=class,shape=cyl)
@
\end{frame}

\begin{frame}[fragile,allowframebreaks]
  \frametitle { Scatterplot }
<<scatter-demo-5,fig.width=8, fig.height=4, fig.show='hold',warnings=FALSE,message=FALSE>>=
qplot(displ,hwy,data=mpg,color=class,shape=cyl,size=cty)
@
\end{frame}

\begin{frame}[fragile,allowframebreaks]
  \frametitle { Scatterplot }
<<scatter-demo-6,fig.width=8, fig.height=4, fig.show='hold',warnings=FALSE,message=FALSE,tidy=FALSE,eval=FALSE>>=
qplot(displ,hwy,data=mpg,color=class,shape=cyl,size=cty) 
+ facet_wrap (~year)
@
\end{frame}

\begin{frame}[fragile,allowframebreaks]
  \frametitle { Scatterplot }
<<scatter-demo-6-alt,fig.width=8, fig.height=4, fig.show='hold',warnings=FALSE,message=FALSE,tidy=FALSE,echo=FALSE>>=
qplot(displ,hwy,data=mpg,color=class,shape=cyl,size=cty) + facet_wrap (~year)
@
\end{frame}

\begin{frame}[fragile,allowframebreaks]
  \frametitle { Scatterplot }
<<scatter-demo-7,fig.width=8, fig.height=4, fig.show='hold',warnings=FALSE,message=FALSE,eval=FALSE>>=
qplot(displ,hwy,data=mpg,color=class,shape=cyl,size=cty) 
+ facet_wrap (~year)
@
\end{frame}

\begin{frame}[fragile,allowframebreaks]
  \frametitle { Scatterplot }
<<scatter-demo-7-alt,fig.width=8, fig.height=4, fig.show='hold',warnings=FALSE,message=FALSE,tidy=FALSE,echo=FALSE>>=
qplot(displ,hwy,data=mpg,color=class,size=cty) + facet_grid (cyl ~ year)
@
\end{frame}


\begin{frame}[fragile,allowframebreaks]
  \frametitle { Scatterplot 2 }
<<scatter-demo-8,fig.width=8, fig.height=4, fig.show='hold',warnings=FALSE,message=FALSE,tidy=FALSE>>=
qplot(class, hwy, data = mpg)
@
\end{frame}

\begin{frame}[fragile,allowframebreaks]
  \frametitle { Scatterplot 2 }
<<scatter-demo-9,fig.width=8, fig.height=4, fig.show='hold',warnings=FALSE,message=FALSE,tidy=FALSE>>=
qplot(reorder(class, hwy), hwy, data = mpg)
@
\end{frame}

\begin{frame}[fragile,allowframebreaks]
  \frametitle { Scatterplot 2 }
<<scatter-demo-10,fig.width=8, fig.height=4, fig.show='hold',warnings=FALSE,message=FALSE,tidy=FALSE>>=
qplot(reorder(class, hwy), hwy, data = mpg, geom="boxplot")
@
\end{frame}

\begin{frame}[fragile,allowframebreaks]
  \frametitle { Scatterplot 3 }
<<scatter-demo-11,fig.width=8, fig.height=4, fig.show='hold',warnings=FALSE,message=FALSE,tidy=FALSE>>=
qplot(Sepal.Length, Petal.Length, data = iris, color = Species, 
      size = Petal.Width, alpha = I(0.7),
      xlab = "Sepal Length", ylab = "Petal Length",
      main = "Sepal vs. Petal Length in Fisher's Iris data")
@
\end{frame}

\begin{frame}[fragile,allowframebreaks]
  \frametitle { Stackedbar Chart }
<<stacked-demo,fig.width=8, fig.height=4, fig.show='hold',warnings=FALSE,message=FALSE,tidy=FALSE>>=
qplot(depth, data = diamonds, binwidth = 0.2, fill = cut) + xlim(55,70)
@
\end{frame}

\begin{frame}[fragile,allowframebreaks]
  \frametitle { Line plot }
<<scatter-demo-12,fig.width=8, fig.height=4, fig.show='hold',warnings=FALSE,message=FALSE,tidy=FALSE>>=
# Scale + Layering + Aesthetic example
plotl <- ggplot(mtcars, aes(x=hp,y=mpg))
plotl + geom_point(aes(color=wt)) + geom_smooth()
@
\end{frame}

\begin{frame}[fragile,allowframebreaks]
  \frametitle { Polar plot }
<<scatter-demo-13,fig.width=8, fig.height=4, fig.show='hold',warnings=FALSE,message=FALSE,tidy=FALSE>>=
# from ggplot2 docs
# Windrose + doughnut plot
movies$rrating <- cut_interval(movies$rating, length = 1)
movies$budgetq <- cut_number(movies$budget, 4)

doh <- ggplot(movies, aes(x = rrating, fill = budgetq))

# Wind rose
doh + geom_bar(width = 1) + coord_polar()
@
\end{frame}

\begin{frame}
	\frametitle { Cons of Grammar of Graphics }
	\begin{itemize}
		\item Grammar doesn't specify finer points of graphing such os font size or background color. GGplot2 Themes tries to mitigate this)
		\item Great for static graphs but not good for interactivity or animation. There are workarounds for this though.
	\end{itemize}
\end{frame}

\section { Webapps }
\subsection { Introduction to Shiny }
\begin{frame}
	\frametitle { Shiny }
  \begin{block} { Shiny package from Rstudio }
    Shiny is a new package from RStudio that makes it incredibly easy to build interactive web applications with R.
  \end{block}
\end{frame}

\subsection { Features }
\begin{frame}
  \frametitle { Features }
  \begin{itemize}
    \item Build useful web applications with only a few lines of code—no JavaScript required.
    \item Shiny user interfaces can be built entirely using R, or integrated with HTML, CSS, and JavaScript for more flexibility.
    \item Works in any R environment (Console R, Rgui for Windows or Mac, ESS, StatET, RStudio, etc.)
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle { Features }
  \begin{itemize}
    \item Pre-built output widgets for displaying plots, tables, and printed output of R objects.
    \item Fast bidirectional communication between the web browser and R using the websockets package.
    \item Uses a reactive programming model that eliminates messy event handling code, so you can focus on the code that really matters.
  \end{itemize}
\end{frame}

\subsection { Architecture }
\begin{frame}
  \frametitle { Architecture and Code Layout }
  \begin{itemize}
    \item Shiny applications have two components - A user-interface definition script and server script
    \item It follows event-based programming model - Anytime any UI component is changed such as selection or movemnet of slider, an event is fired to the backend to handle.
    \item Server and client communicate seamlessly using websockets.
    \item An event triggers a server response and the UI is refreshed accordingly to reflect the change.
  \end{itemize}
\end{frame}

\subsection { Code example }
\begin{frame}
  \frametitle { A live plot of mpg dataset }
\end{frame}

\section { Integration with other Systems }
\begin{frame}
	\frametitle { Packages }
	\begin{itemize}
		\item hadoop - RHadoop
		\item c++ - RCpp
		\item javascript - Shiny
	\end{itemize}
\end{frame}

\begin{frame}
  \frametitle { Literate programming using Knitr }
  \begin{block} { Literate programming }
  Literate programming is an approach to programming introduced by Donald Knuth in which a program is given as an explanation of the program logic in a natural language, such as English, interspersed with snippets of macros and traditional source code, from which a compilable source code can be generated
  \end{block}
\end{frame}

\begin{frame}
  \frametitle {Knitr}
  \begin{itemize}
    \item Transparent engine for dynamic report generation with R
    \item Implements literate programming paradigm
    \item Only one document to edit. Less pain to keep everything in sync
    \item Can output into different final outputs such as HTML, PDF etc
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle {Knitr features}
  \begin{itemize}
    \item Faithful output
    \item Built-in cache
    \item Easy Formatting
    \item Flexibility in output devices
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle { Knitr Demo }
\end{frame}

\begin{frame}
  \frametitle { Thank you }
  \begin{itemize}
    \item Twitter \textbf {@vinayakh}
    \item Email \textbf {vinayakh at gmail}
  \end{itemize}
\end{frame}
\end{document}
